MathJax.Hub.Register.StartupHook("TeX Jax Ready",function(){MathJax.InputJax.TeX.Definitions.Add({macros:{
	expval:["Macro","{\\left\\langle {#1 } \\right\\rangle}",1],
	abs:["Macro","{\\left\\vert #1 \\right\\vert}",1],
	ket:["Macro","{\\left\\vert { #1 } \\right\\rangle}",1],
	bra:["Macro","{\\left\\langle { #1} \\right\\vert}",1],
	inner:["Macro","{\\left\\langle {#1} \\mid { #2} \\right\\rangle}",2],
	matel:["Macro","{\\left\\langle{ #1 }\\right\\vert{ #2 }\\left\\vert{#3}\\right\\rangle}",3],
	diffwrt:["Macro","{\\; d {#1} \\;}",1],
	diffwrtn:["Macro","{\\; d^{#1} {#2} \\;}",2],
	limf:["Macro","{ \\lim_{#1} \\;}",1],
	sumf:["Macro","{ \\sum_{#1} }",1],
	intf:["Macro","{ \\int_{#1}^{#2} \\; }",2],
	par:["Macro","{ \\partial_{#1} }",1],
	deriv:["Macro","{ {\\mathscr D}_{#1} #2 }",2],
	expn:["Macro","{ \\exp\\left( #1 \\right) }",1],
	eq:["Macro","{ \\eqref }",0],
	tensor:["Macro","{ \\mathbf{#1} }",1],
	unit:["Macro","{ \\; #1 }",1],
}})}),
MathJax.Hub.Register.StartupHook("TeX Jax Ready", function () {
  MathJax.InputJax.TeX.prefilterHooks.Add(function (data) {
	data.math = data.math.replace(/\(/g, '\\left('),
	data.math = data.math.replace(/\)/g, '\\right)'),
	data.math = data.math.replace(/\[/g, '\\left['),
	data.math = data.math.replace(/\]/g, '\\right]'),

	data.math = data.math.replace(/(?<!\\)⟨/g, ' \\left\\langle '),
	data.math = data.math.replace(/(?<!\\)⟩/g, ' \\right\\rangle '),
	data.math = data.math.replace(/(?<!\\)⏋/g, ' \\right| '),
	data.math = data.math.replace(/(?<!\\)⎾/g, ' \\left| '),

	data.math = data.math.replace(/%%</g, ' \\begin{bmatrix} '),
	data.math = data.math.replace(/>%%/g, ' \\end{bmatrix} '),
	data.math = data.math.replace(/⎡/g, ' \\begin{bmatrix} '),
	data.math = data.math.replace(/⎦/g, ' \\end{bmatrix} '),

	data.math = data.math.replace(/,,/g, ' \\\\ '),
	data.math = data.math.replace(/ͺͺͺ/g, ' \\hspace{10mm} · '),
	data.math = data.math.replace(/ͺ/g, ' \\; '),

	data.math = data.math.replace(/(?<!\\)↗/g, ' \\vec '),
	data.math = data.math.replace(/(?<!\\)⬀/g, ' \\vec '),
	data.math = data.math.replace(/(?<!\\)↑/g, ' \\hat '),
	data.math = data.math.replace(/(?<!\\)⌃/g, ' \\hat '),
	data.math = data.math.replace(/(?<!\\)⬈/g, ' \\tensor '),

	data.math = data.math.replace(/𝝏/g, ' \\partial '),
	data.math = data.math.replace(/ḍ/g, ' {\\mathsf d} '),
	data.math = data.math.replace(/Ḍ/g, ' {\\mathcal D} '),
	data.math = data.math.replace(/∫\{/g, ' \\; \\intf{ '),
	data.math = data.math.replace(/˙/g, ' \\dot '),
	data.math = data.math.replace(/¨/g, ' \\ddot '),

	data.math = data.math.replace(/ɗ/g, ' \\; \\diffwrt '),
	data.math = data.math.replace(/Ɗ/g, ' {\\mathscr d} '),

	data.math = data.math.replace(/(?<!\\)⦁/g, ' \\bullet '),
	data.math = data.math.replace(/·/g, ' '),
	data.math = data.math.replace(/⋄/g, ' \\cdot '),
	data.math = data.math.replace(/÷/g, '\\frac '),
	data.math = data.math.replace(/~/g, '\\tilde '),
	data.math = data.math.replace(/»/g, '\\gg '),
	data.math = data.math.replace(/«/g, '\\ll '),
	data.math = data.math.replace(/(?<!\\)lim\{/g, ' \\; \\limf{ '),
	data.math = data.math.replace(/𝓵\{/g, ' \\; \\limf{ '),
	data.math = data.math.replace(/(?<!\\)∑ /g, ' \\sum '),
	data.math = data.math.replace(/(?<!\\)∑\{/g, ' \\sumf{ '),
	data.math = data.math.replace(/(?<!\\)∏/g, ' \\prod '),
	data.math = data.math.replace(/(?<!\\)∀/g, ' \\; \\forall '),
	data.math = data.math.replace(/(?<!\\)√/g, ' \\sqrt '),
	data.math = data.math.replace(/(?<!\\)±/g, ' \\pm '),
	data.math = data.math.replace(/(?<!\\)∼/g, ' \\sim '),
		  
	data.math = data.math.replace(/𝓮𝓺/g, ' \\label '),

	data.math = data.math.replace(/(?<!\\)FOR:/g, ' \\hspace{5mm} for \\;\\;'),
	data.math = data.math.replace(/(?<!\\)𝔱𝔯 /g, ' \\; Tr \\; '),
	data.math = data.math.replace(/(?<!\\)exp\{/g, ' \\; \\expn{ '),
		  
	data.math = data.math.replace(/(?<!\\)₍/g, ' _{ '),
	data.math = data.math.replace(/(?<!\\)₎/g, ' } '),
	data.math = data.math.replace(/(?<!\\)⁽/g, ' ^{ '),
	data.math = data.math.replace(/(?<!\\)⁾/g, ' } '),
	data.math = data.math.replace(/(?<!\\)⟦/g, ' {_{[ '),
	data.math = data.math.replace(/(?<!\\)⟧/g, ' ]}} '),
	data.math = data.math.replace(/(?<!\\)⦃/g, ' \\unit{ '),
	data.math = data.math.replace(/(?<!\\)⦄/g, ' } '),
	data.math = data.math.replace(/(?<!\\)⎨/g, ' \\mathtt{ '),
	data.math = data.math.replace(/(?<!\\)⎬/g, ' } '),

	data.math = data.math.replace(/½/g, ' \\tfrac 12 '),
	data.math = data.math.replace(/¼/g, ' \\tfrac 14 '),
	data.math = data.math.replace(/ℍ/g, ' {\\mathscr H} '),
	data.math = data.math.replace(/ℒ/g, ' {\\mathscr L} '),
	data.math = data.math.replace(/ƙ/g, ' {k_B} '),
	data.math = data.math.replace(/❄/g, ' {\\ast} ');
	data.math = data.math.replace(/ħ/g, ' \\hbar ');
	});
}),
MathJax.Ajax.loadComplete("[MathJax]/extensions/phizzy.js");
